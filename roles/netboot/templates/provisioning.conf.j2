# /etc/dnsmasq.d/provisioning.conf

# === General Configuration ===
interface={{ dnsmasq_interface }}
listen-address={{ dnsmasq_listen_address }}
bind-interfaces

no-resolv

domain={{ dnsmasq_domain }}

# === DNS Configuration ===
{% for server in dnsmasq_upstream_servers %}
server={{ server }}
{% endfor %}
domain-needed
bogus-priv
local=/{{ dnsmasq_domain }}/

{% for host in dnsmasq_static_hosts %}
address=/{{ host.name }}/{{ host.ip }}
{% endfor %}

{% for host in dnsmasq_dhcp_reservations %}
# DNS record for the short name (e.g., "console-node1")
address=/{{ host.hostname }}/{{ host.ip }}
# DNS record for the FQDN (e.g., "console-node1.sddc.info")
address=/{{ host.hostname }}.sddc.info/{{ host.ip }}
# DHCP reservation and hostname assignment
dhcp-host={{ host.mac }},{{ host.ip }},{{ host.hostname }}
{% endfor %}

# === DHCP Configuration ===
dhcp-range={{ dnsmasq_dhcp_range }}
dhcp-option=option:router,{{ dnsmasq_dhcp_router }}
dhcp-option=option:dns-server,{{ dnsmasq_dhcp_dns_server }}
dhcp-authoritative
log-dhcp

enable-tftp
tftp-root = {{ tftp_root }}

# === PXE/iPXE Chainloading Logic ===
# Tag requests coming from iPXE firmware (DHCP option 175)
dhcp-match=set:ipxe,175

# Tag requests coming from iPXE itself. iPXE identifies itself with user-class="iPXE".
dhcp-userclass=set:ipxe,iPXE

# Tag requests from UEFI clients (DHCP option 93)
# Arch 7 = EFI x86-64
# Arch 9 = EFI x86-64
dhcp-match=set:efi-x86_64,option:client-arch,7
dhcp-match=set:efi-x86_64,option:client-arch,9

# Stage 1: Client is a UEFI machine. Serve the iPXE EFI binary.
# Matches if 'ipxe' is NOT set but 'efi-x86_64' IS set.
dhcp-boot=tag:!ipxe,tag:efi-x86_64,ipxe.efi

# Stage 2: Client is now running iPXE. Chainload to the main iPXE script.
dhcp-boot=tag:ipxe,{{ ipxe_boot_url }}
