---
- name: Create temporary /etc/resolv.conf to allow for DNS lookups
  ansible.builtin.copy:
    dest: /etc/resolv.conf
    content: "nameserver 8.8.8.8"

- name: Disable systemd-resolved aggressively
  block:
    - name: Stop systemd-resolved service
      service:
        name: systemd-resolved
        state: stopped
        
    - name: Disable systemd-resolved service
      service:
        name: systemd-resolved
        enabled: no
        
    - name: Kill any remaining systemd-resolved processes
      shell: |
        if pgrep -f systemd-resolved > /dev/null 2>&1; then
          pkill -f systemd-resolved || true
          sleep 2
        fi
        exit 0
      changed_when: false
      
    - name: Wait for port 53 to be freed
      wait_for:
        port: 53
        host: 127.0.0.1
        state: stopped
        timeout: 10
      ignore_errors: yes
      register: port_53_wait
      
    - name: Force kill processes on port 53 if still occupied
      shell: |
        lsof -ti:53 | xargs -r kill -9 2>/dev/null || true
        sleep 2
      when: port_53_wait is failed
      changed_when: false
      
    - name: Final verification that port 53 is free
      shell: "netstat -tlnp | grep ':53 ' || ss -tlnp | grep ':53 '"
      register: port_53_check
      failed_when: false
      changed_when: false
      
    - name: Log port 53 status
      debug:
        msg: "Port 53 status: {{ 'Free' if port_53_check.rc != 0 else 'Still occupied by: ' + port_53_check.stdout }}"
        
    - name: Verify systemd-resolved is not running
      command: systemctl is-active systemd-resolved
      register: resolved_status
      failed_when: resolved_status.stdout == "active"
      changed_when: false
  rescue:
    - name: Log systemd-resolved disable failure but continue
      debug:
        msg: "Failed to completely disable systemd-resolved, but attempting to continue with dnsmasq setup"
  tags:
    - netboot

- name: Install dnsmasq and tftp client (dnsmasq provides TFTP server natively)
  apt:
    name:
      - dnsmasq
      - tftp-hpa
    state: present
  tags:
    - netboot

- name: Remove conflicting TFTP server packages
  apt:
    name:
      - tftpd-hpa
      - atftpd
      - tftpd
    state: absent
  tags:
    - netboot

- name: Copy dnsmasq config
  template:
    src: provisioning.conf.j2
    dest: /etc/dnsmasq.d/provisioning.conf
  notify: restart dnsmasq
  tags:
    - netboot
    - dnsmasq_template

- name: Flush handlers to restart dnsmasq
  meta: flush_handlers


- name: Start and enable dnsmasq with debugging
  block:
    - name: Pre-start port check for dnsmasq
      shell: "netstat -tlnp | grep ':53 ' || ss -tlnp | grep ':53 '"
      register: pre_start_port_check
      failed_when: false
      changed_when: false
      
    - name: Log pre-start port status
      debug:
        msg: "Port 53 before dnsmasq start: {{ 'Free' if pre_start_port_check.rc != 0 else 'Occupied by: ' + pre_start_port_check.stdout }}"
        
    - name: Test dnsmasq configuration before starting
      command: dnsmasq --test
      register: dnsmasq_test
      changed_when: false
      failed_when: false
      
    - name: Log dnsmasq configuration test result
      debug:
        msg: "Dnsmasq config test: {{ 'PASSED' if dnsmasq_test.rc == 0 else 'FAILED' }} - {{ dnsmasq_test.stderr if dnsmasq_test.rc != 0 else 'Configuration is valid' }}"
        
    - name: Fix dnsmasq configuration if test failed
      fail:
        msg: "Dnsmasq configuration is invalid: {{ dnsmasq_test.stderr }}"
      when: dnsmasq_test.rc != 0
      
    - name: Ensure TFTP root directory is accessible by dnsmasq
      file:
        path: "{{ tftp_root }}"
        owner: root
        group: root
        mode: "0755"
        state: directory
      
    - name: Start and enable dnsmasq
      service:
        name: dnsmasq
        state: restarted
        enabled: yes
      register: dnsmasq_start
      
    - name: Wait a moment for dnsmasq to fully start
      pause:
        seconds: 3
      when: dnsmasq_start is not failed
      
    - name: Check dnsmasq service status if start failed
      command: systemctl status dnsmasq --no-pager -l
      register: dnsmasq_status
      when: dnsmasq_start is failed
      ignore_errors: true
      changed_when: false
      
    - name: Check dnsmasq logs for errors
      command: journalctl -u dnsmasq -n 30 --no-pager
      register: dnsmasq_logs
      when: dnsmasq_start is failed
      changed_when: false
      ignore_errors: true
      
    - name: Display comprehensive dnsmasq failure diagnostics
      debug:
        msg: |
          DNSMASQ START FAILURE DIAGNOSTICS:
          
          Service Status:
          {{ dnsmasq_status.stdout_lines | join('\n          ') if dnsmasq_status is defined else '          Unable to get status' }}
          
          Recent Logs:
          {{ dnsmasq_logs.stdout_lines | join('\n          ') if dnsmasq_logs is defined else '          Unable to get logs' }}
      when: dnsmasq_start is failed
  tags:
    - netboot

- name: Verify dnsmasq services are running
  block:
    - name: Wait for dnsmasq DNS service to bind to port 53
      wait_for:
        port: 53
        host: "{{ dnsmasq_listen_address }}"
        state: started
        timeout: 15
    
    - name: Check if TFTP is enabled by looking for the port
      shell: "netstat -ulnp | grep ':69 ' || ss -ulnp | grep ':69 '"
      register: tftp_port_check
      changed_when: false
      failed_when: false
      
    - name: Display TFTP port status
      debug:
        msg: "TFTP port status: {{ tftp_port_check.stdout if tftp_port_check.stdout != '' else 'Port 69 not found - TFTP may not be enabled' }}"
        
    - name: Test TFTP port connectivity (UDP service)
      shell: |
        # Test TFTP with a quick connection attempt
        timeout 3 bash -c "echo 'quit' | nc -u 127.0.0.1 69" 2>/dev/null || \
        timeout 3 bash -c "echo 'quit' | tftp 127.0.0.1 69" 2>/dev/null || \
        echo "TFTP port accessible but service may require valid TFTP commands"
        exit 0
      when: tftp_port_check.rc == 0
      register: tftp_connectivity_test
      changed_when: false
      
    - name: Log TFTP service status
      debug:
        msg: "TFTP service: {{ 'Running and accessible' if tftp_port_check.rc == 0 else 'Not running' }} - Port binding confirmed"
        
    - name: Test TFTP functionality manually
      shell: |
        echo "Testing TFTP connection..."
        echo "quit" | tftp 127.0.0.1 69 2>&1 || echo "TFTP test failed"
      register: tftp_manual_test
      changed_when: false
      ignore_errors: true
      
    - name: Log TFTP manual test result
      debug:
        msg: "TFTP manual test: {{ tftp_manual_test.stdout_lines }}"
  tags:
    - netboot

- name: Remove /etc/resolv.conf symlink and configure DNS
  block:
    - name: Remove /etc/resolv.conf symlink
      file:
        path: /etc/resolv.conf
        state: absent
    
    - name: Create static /etc/resolv.conf
      template:
        src: resolv.conf.j2
        dest: /etc/resolv.conf
    
    - name: Verify DNS resolution works via dnsmasq
      command: nslookup google.com {{ dnsmasq_listen_address }}
      register: dns_test
      retries: 5
      delay: 2
      until: dns_test.rc == 0
      changed_when: false
  tags:
    - netboot

- name: Ensure no conflicting TFTP services are running
  block:
    - name: Check which TFTP services exist before stopping them
      shell: "systemctl list-unit-files {{ item }} --no-pager --no-legend 2>/dev/null | grep -q . && echo 'exists' || echo 'not_found'"
      register: tftp_service_check
      loop:
        - tftpd-hpa
        - atftpd
        - xinetd
        - tftp.socket
        - tftp.service
      changed_when: false
      failed_when: false
    
    - name: Stop and disable existing conflicting TFTP services
      service:
        name: "{{ item.item }}"
        state: stopped
        enabled: no
      when: item.stdout == 'exists'
      loop: "{{ tftp_service_check.results }}"
      ignore_errors: yes
    
    - name: Verify no standalone TFTP services are listening on port 69
      shell: "netstat -ulnp | grep ':69 ' | grep -v dnsmasq || true"
      register: conflicting_tftp
      changed_when: false
      
    - name: Log conflicting TFTP services if found
      debug:
        msg: "Warning: Found non-dnsmasq services on port 69: {{ conflicting_tftp.stdout }}"
      when: conflicting_tftp.stdout != ""
  tags:
    - netboot

- name: Create tftpboot directory for dnsmasq TFTP service
  file:
    path: /var/lib/tftpboot
    state: directory
    owner: root
    group: root
    mode: "0755"
    recurse: yes
  tags:
    - netboot

- name: Ensure dnsmasq can access TFTP directory (verify ownership)
  shell: |
    chown -R root:root /var/lib/tftpboot
    chmod -R 755 /var/lib/tftpboot
    find /var/lib/tftpboot -type f -exec chmod 644 {} \;
  changed_when: false
  tags:
    - netboot

- name: Check if iPXE bootloaders exist
  stat:
    path: "{{ item.dest }}"
  loop:
    - { url: "http://boot.ipxe.org/ipxe.efi", dest: "/var/lib/tftpboot/ipxe.efi" }
  register: ipxe_files
  tags:
    - netboot

- name: Download iPXE bootloaders
  get_url:
    url: "{{ item.item.url }}"
    dest: "{{ item.item.dest }}"
    owner: root
    group: root
    mode: '0644'
  loop: "{{ ipxe_files.results }}"
  when: not item.stat.exists
  register: ipxe_download
  until: ipxe_download is succeeded
  retries: 5
  delay: 2
  tags:
    - netboot

- name: Force correct permissions on all TFTP files after download
  shell: |
    find /var/lib/tftpboot -type f -exec chown root:root {} \;
    find /var/lib/tftpboot -type f -exec chmod 644 {} \;
    ls -la /var/lib/tftpboot/
  register: tftp_perms_fix
  changed_when: false
  tags:
    - netboot

- name: Display TFTP file permissions
  debug:
    msg: "{{ tftp_perms_fix.stdout_lines }}"
  tags:
    - netboot

- name: Restart dnsmasq after fixing TFTP file permissions
  service:
    name: dnsmasq
    state: restarted
  tags:
    - netboot

- name: Wait for dnsmasq TFTP to restart
  pause:
    seconds: 3
  tags:
    - netboot

- name: Test comprehensive DNS functionality
  block:
    - name: Test local domain resolution
      command: dig @{{ dnsmasq_listen_address }} {{ dnsmasq_domain }}
      register: local_dns_test
      changed_when: false
      failed_when: local_dns_test.rc != 0

    - name: Test external domain resolution
      command: dig @{{ dnsmasq_listen_address }} google.com
      register: external_dns_test
      changed_when: false
      failed_when: external_dns_test.rc != 0

    - name: Test static host resolution
      command: dig @{{ dnsmasq_listen_address }} gateway.{{ dnsmasq_domain }}
      register: static_dns_test
      changed_when: false
      failed_when: static_dns_test.rc != 0
      
    - name: Display DNS test results
      debug:
        msg: "All DNS functionality tests passed successfully"
  tags:
    - netboot
    - dns_test