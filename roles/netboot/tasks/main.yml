---
- name: Create temporary /etc/resolv.conf to allow for DNS lookups
  ansible.builtin.copy:
    dest: /etc/resolv.conf
    content: |
      nameserver 192.168.10.1
      nameserver 2606:4700:4700::1111

- name: Replace systemd-resolved with dnsmasq (Ubuntu 24.04 compatible)
  block:
    - name: Stop and disable systemd-resolved socket (Ubuntu 24.04)
      systemd:
        name: systemd-resolved.socket
        state: stopped
        enabled: no
        masked: yes
      ignore_errors: yes
      
    - name: Stop systemd-resolved service
      systemd:
        name: systemd-resolved
        state: stopped
      ignore_errors: yes
      
    - name: Disable systemd-resolved service
      systemd:
        name: systemd-resolved
        enabled: no
      ignore_errors: yes
      
    - name: Mask systemd-resolved to prevent restart (Ubuntu 24.04)
      systemd:
        name: systemd-resolved
        masked: yes
      ignore_errors: yes
      
    - name: Prevent NetworkManager DNS management (Ubuntu 24.04)
      ini_file:
        path: /etc/NetworkManager/NetworkManager.conf
        section: main
        option: dns
        value: none
        create: yes
      ignore_errors: yes
    - name: Remove /etc/resolv.conf symlink
      file:
        path: /etc/resolv.conf
        state: absent
    
    - name: Create static /etc/resolv.conf
      copy:
        dest: /etc/resolv.conf
        content: |
          nameserver 192.168.10.1
          nameserver 2606:4700:4700::1111
  tags:
    - netboot

- name: Create tftpboot directory for dnsmasq TFTP service (before dnsmasq installation)
  file:
    path: /var/lib/tftpboot
    state: directory
    owner: root
    group: root
    mode: "0755"
  tags:
    - netboot

- name: Install dnsmasq and tftp client (dnsmasq provides TFTP server natively)
  apt:
    name:
      - dnsmasq
      - tftp-hpa
    state: present
  tags:
    - netboot

- name: Remove conflicting TFTP server packages
  apt:
    name:
      - tftpd-hpa
      - atftpd
      - tftpd
    state: absent
  tags:
    - netboot

- name: Copy dnsmasq config
  template:
    src: provisioning.conf.j2
    dest: /etc/dnsmasq.d/provisioning.conf
  notify: restart dnsmasq
  tags:
    - netboot
    - dnsmasq_template

- name: Flush handlers to restart dnsmasq
  meta: flush_handlers


- name: Start and enable dnsmasq
  block:
    - name: Test dnsmasq configuration
      command: dnsmasq --test --conf-file=/etc/dnsmasq.d/provisioning.conf
      register: dnsmasq_test
      changed_when: false
      failed_when: false
      
    - name: Show dnsmasq configuration test results
      debug:
        msg: |
          Dnsmasq config test: {{ 'PASSED' if dnsmasq_test.rc == 0 else 'FAILED' }}
          {{ dnsmasq_test.stdout if dnsmasq_test.stdout else '' }}
          {{ dnsmasq_test.stderr if dnsmasq_test.stderr else '' }}
      
    - name: Check dnsmasq configuration syntax
      command: dnsmasq --test --conf-file=/etc/dnsmasq.d/provisioning.conf
      register: dnsmasq_syntax
      changed_when: false
      failed_when: dnsmasq_syntax.rc != 0
      
    - name: Verify provisioning bridge exists before starting dnsmasq
      command: ip link show {{ provisioning_bridge | default('br-prov') }}
      register: bridge_check
      changed_when: false
      failed_when: bridge_check.rc != 0
      
    - name: Start and enable dnsmasq
      systemd:
        name: dnsmasq
        state: restarted
        enabled: yes
  tags:
    - netboot

- name: Verify dnsmasq DNS service is running
  wait_for:
    port: 53
    host: "{{ dnsmasq_listen_address }}"
    state: started
    timeout: 15
  tags:
    - netboot

- name: Configure final DNS resolution
  block:
    - name: Remove /etc/resolv.conf symlink
      file:
        path: /etc/resolv.conf
        state: absent
    
    - name: Create static /etc/resolv.conf with dnsmasq
      template:
        src: resolv.conf.j2
        dest: /etc/resolv.conf
    
    - name: Verify IPv4 DNS resolution works via dnsmasq
      command: nslookup google.com {{ dnsmasq_listen_address }}
      register: dns_ipv4_test
      retries: 3
      delay: 2
      until: dns_ipv4_test.rc == 0
      changed_when: false
      
    - name: Verify IPv6 DNS resolution works via dnsmasq
      command: nslookup -type=AAAA google.com {{ dnsmasq_listen_address }}
      register: dns_ipv6_test
      retries: 3
      delay: 2
      until: dns_ipv6_test.rc == 0
      changed_when: false
      ignore_errors: yes  # IPv6 may not be fully configured yet
      
    - name: Test IPv6 DNS server availability
      command: dig @::1 google.com AAAA +short
      register: ipv6_dns_test
      changed_when: false
      ignore_errors: yes
      
    - name: Log DNS test results
      debug:
        msg:
          - "IPv4 DNS test: {{ 'PASSED' if dns_ipv4_test.rc == 0 else 'FAILED' }}"
          - "IPv6 DNS AAAA query: {{ 'PASSED' if dns_ipv6_test.rc == 0 else 'FAILED (may be expected)' }}"
          - "IPv6 DNS server test: {{ 'PASSED' if ipv6_dns_test.rc == 0 else 'FAILED (may be expected)' }}"
  tags:
    - netboot

- name: Ensure no conflicting TFTP services are running
  block:
    - name: Check which TFTP services exist before stopping them
      shell: "systemctl list-unit-files {{ item }} --no-pager --no-legend 2>/dev/null | grep -q . && echo 'exists' || echo 'not_found'"
      register: tftp_service_check
      loop:
        - tftpd-hpa
        - atftpd
        - xinetd
        - tftp.socket
        - tftp.service
      changed_when: false
      failed_when: false
    
    - name: Stop and disable existing conflicting TFTP services
      service:
        name: "{{ item.item }}"
        state: stopped
        enabled: no
      when: item.stdout == 'exists'
      loop: "{{ tftp_service_check.results }}"
      ignore_errors: yes
    
    - name: Verify no standalone TFTP services are listening on port 69
      shell: "netstat -ulnp | grep ':69 ' | grep -v dnsmasq || true"
      register: conflicting_tftp
      changed_when: false
      
    - name: Log conflicting TFTP services if found
      debug:
        msg: "Warning: Found non-dnsmasq services on port 69: {{ conflicting_tftp.stdout }}"
      when: conflicting_tftp.stdout != ""
  tags:
    - netboot

- name: Set proper ownership for tftpboot directory after dnsmasq installation
  file:
    path: /var/lib/tftpboot
    owner: dnsmasq
    group: nogroup
    mode: "0755"
    recurse: yes
  tags:
    - netboot

- name: Check if iPXE bootloaders exist
  stat:
    path: "{{ item.dest }}"
  loop:
    - { url: "http://boot.ipxe.org/ipxe.efi", dest: "/var/lib/tftpboot/ipxe.efi" }
  register: ipxe_files
  tags:
    - netboot

- name: Download iPXE bootloaders
  get_url:
    url: "{{ item.item.url }}"
    dest: "{{ item.item.dest }}"
    owner: dnsmasq
    group: nogroup
    mode: '0644'
  loop: "{{ ipxe_files.results }}"
  when: not item.stat.exists
  register: ipxe_download
  until: ipxe_download is succeeded
  retries: 5
  delay: 2
  tags:
    - netboot

- name: Force correct permissions on all TFTP files after download
  shell: |
    find /var/lib/tftpboot -type f -exec chown dnsmasq:nogroup {} \;
    find /var/lib/tftpboot -type f -exec chmod 644 {} \;
    ls -la /var/lib/tftpboot/
  register: tftp_perms_fix
  changed_when: false
  tags:
    - netboot

- name: Display TFTP file permissions
  debug:
    msg: "{{ tftp_perms_fix.stdout_lines }}"
  tags:
    - netboot

- name: Restart dnsmasq after fixing TFTP file permissions
  service:
    name: dnsmasq
    state: restarted
  tags:
    - netboot

- name: Wait for dnsmasq TFTP to restart
  pause:
    seconds: 3
  tags:
    - netboot

- name: Test comprehensive DNS functionality
  block:
    - name: Test local domain resolution
      command: dig @{{ dnsmasq_listen_address }} {{ dnsmasq_domain }}
      register: local_dns_test
      changed_when: false
      failed_when: local_dns_test.rc != 0

    - name: Test external domain resolution
      command: dig @{{ dnsmasq_listen_address }} google.com
      register: external_dns_test
      changed_when: false
      failed_when: external_dns_test.rc != 0

    - name: Test static host resolution
      command: dig @{{ dnsmasq_listen_address }} gateway.{{ dnsmasq_domain }}
      register: static_dns_test
      changed_when: false
      failed_when: static_dns_test.rc != 0
      
    - name: Display DNS test results
      debug:
        msg: "All DNS functionality tests passed successfully"
  tags:
    - netboot
    - dns_test