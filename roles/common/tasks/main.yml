---
- name: Update apt cache (foundation setup)
  apt:
    update_cache: yes
    cache_valid_time: 3600 # Cache is valid for 1 hour
  tags:
    - foundation
    - packages
    - maintenance

- name: Install common packages
  apt:
    name:
      - vim
      - git
      - curl
      - wget
      - unzip
      - zstd
      - cpio
      - file
    state: present
  tags:
    - foundation
    - packages
    - system_config

- name: Generate SSH key pair for sysadmin user
  ansible.builtin.shell:
    cmd: "ssh-keygen -t ed25519 -f /home/sysadmin/.ssh/sysadmin_automation_key -N ''"
    creates: /home/sysadmin/.ssh/sysadmin_automation_key
  tags:
    - foundation
    - ssh_setup
    - system_config

- name: Set correct ownership for sysadmin SSH keys
  ansible.builtin.file:
    path: /home/sysadmin/.ssh/sysadmin_automation_key
    owner: sysadmin
    group: sysadmin
    mode: "0600"
  tags:
    - foundation
    - ssh_setup
    - permissions

- name: Set correct ownership for sysadmin public SSH key
  ansible.builtin.file:
    path: /home/sysadmin/.ssh/sysadmin_automation_key.pub
    owner: sysadmin
    group: sysadmin
    mode: "0644"
  tags:
    - ssh_setup

- name: Configure SSH client for sysadmin user
  ansible.builtin.blockinfile:
    path: /home/sysadmin/.ssh/config
    create: yes
    owner: sysadmin
    group: sysadmin
    mode: "0600"
    block: |
      Host 10.10.1.* node* console-node*
        User sysadmin
        IdentityFile /home/sysadmin/.ssh/sysadmin_automation_key
        StrictHostKeyChecking no
        UserKnownHostsFile /dev/null
  tags:
    - ssh_setup


- name: Generate SSH key pair for root user
  ansible.builtin.shell:
    cmd: "ssh-keygen -t ed25519 -f /root/.ssh/root_automation_key -N ''"
    creates: /root/.ssh/root_automation_key
  become: yes
  tags:
    - ssh_setup

- name: Read sysadmin public key
  ansible.builtin.slurp:
    src: /home/sysadmin/.ssh/sysadmin_automation_key.pub
  register: sysadmin_pub_key_file
  tags:
    - ssh_setup

- name: Read root public key
  ansible.builtin.slurp:
    src: /root/.ssh/root_automation_key.pub
  become: yes
  register: root_pub_key_file
  tags:
    - ssh_setup

- name: Set public keys as facts
  ansible.builtin.set_fact:
    sysadmin_pub_key: "{{ sysadmin_pub_key_file.content | b64decode }}"
    root_pub_key: "{{ root_pub_key_file.content | b64decode }}"
  tags:
    - ssh_setup

- name: Authorize new sysadmin key for local sysadmin user
  ansible.posix.authorized_key:
    user: sysadmin
    key: "{{ sysadmin_pub_key }}"
    state: present
  tags:
    - ssh_setup

- name: Authorize new root key for local root user
  ansible.posix.authorized_key:
    user: root
    key: "{{ root_pub_key }}"
    state: present
  become: yes
  tags:
    - ssh_setup

- name: Securely configure SSH daemon
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?PermitRootLogin'
    line: 'PermitRootLogin prohibit-password'
    state: present
  register: sshd_config_changed
  tags:
    - ssh_setup

- name: Restart sshd when configuration changes
  service:
    name: sshd
    state: restarted
  when: sshd_config_changed.changed
  tags:
    - ssh_setup

- name: Update all packages to the latest version
  apt:
    upgrade: dist
    autoremove: yes
    autoclean: yes
  when: perform_system_upgrade | default(false)
  tags:
    - package_upgrade
    - expensive
    - maintenance

- name: Configure sysctl for networking
  ansible.posix.sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    sysctl_set: yes
    state: present
    reload: yes
  with_items:
    - { key: 'net.ipv4.ip_forward', value: '1' }
    - { key: 'net.ipv6.conf.all.forwarding', value: '1' }
  tags:
    - foundation
    - network_setup
    - system_config


- name: Install packages for NAT
  apt:
    name:
      - iptables
      - iptables-persistent
    state: present
  tags:
    - foundation
    - network_setup
    - packages

- name: Configure NAT rules with dynamic interface detection
  block:
    - name: Set external interface for NAT (WAN interface)
      set_fact:
        external_interface: "{{ wan_interface | default('enp1s0') }}"
        
    - name: Validate external interface exists
      shell: "ip link show {{ external_interface }} 2>/dev/null"
      register: external_interface_check
      changed_when: false
      failed_when: external_interface_check.rc != 0
      
    - name: Log NAT configuration
      ansible.builtin.debug:
        msg: |
          NAT Configuration:
          - External Interface (WAN): {{ external_interface }}
          - Internal Network: 10.10.1.0/24 (br-prov bridge)
        
    - name: Check if NAT rule exists
      ansible.builtin.shell: "iptables -t nat -C POSTROUTING -s 10.10.1.0/24 -o {{ external_interface }} -j MASQUERADE -m comment --comment 'NAT for internal network'"
      register: nat_rule_check
      changed_when: false
      failed_when: false
      
    - name: Set NAT rule for internal network
      ansible.builtin.shell: "iptables -t nat -A POSTROUTING -s 10.10.1.0/24 -o {{ external_interface }} -j MASQUERADE -m comment --comment 'NAT for internal network'"
      when: nat_rule_check.rc != 0
      register: nat_rule_add
      
    - name: Verify NAT rule was added successfully
      ansible.builtin.shell: "iptables -t nat -C POSTROUTING -s 10.10.1.0/24 -o {{ external_interface }} -j MASQUERADE -m comment --comment 'NAT for internal network'"
      when: nat_rule_check.rc != 0
      changed_when: false
      failed_when: false
      register: nat_rule_verify
      
    - name: Log NAT rule configuration result
      ansible.builtin.debug:
        msg: "NAT rule configuration: {{ 'already exists' if nat_rule_check.rc == 0 else ('successfully added' if nat_rule_verify.rc == 0 else 'failed to add') }}"
        
    - name: Fail if NAT rule addition was unsuccessful
      ansible.builtin.fail:
        msg: "Failed to add NAT rule after attempt"
      when: 
        - nat_rule_check.rc != 0
        - nat_rule_verify.rc != 0
  tags:
    - foundation
    - network_setup
    - system_config

- name: Persist iptables rules with verification
  block:
    - name: Save iptables rules
      ansible.builtin.command:
        cmd: netfilter-persistent save
      register: iptables_save_result
      changed_when: false
      
    - name: Verify iptables rules were saved
      ansible.builtin.stat:
        path: /etc/iptables/rules.v4
      register: iptables_rules_file
      
    - name: Log iptables persistence result
      ansible.builtin.debug:
        msg: "Iptables rules persistence: {{ 'successful' if iptables_rules_file.stat.exists else 'failed - rules file not found' }}"
        
    - name: Fail if iptables rules were not persisted
      ansible.builtin.fail:
        msg: "Failed to persist iptables rules"
      when: not iptables_rules_file.stat.exists
  tags:
    - foundation
    - network_setup
    - system_config

- name: Include resource limits and monitoring
  include_tasks: monitoring.yml
  tags:
    - foundation
    - monitoring
    - system_config
    - maintenance

- name: Install Docker with optimized checks
  block:
    - name: Check if Docker is already installed and running
      systemd:
        name: docker
      register: docker_service_status
      ignore_errors: true
      
    - name: Set Docker installation facts
      set_fact:
        docker_needs_install: "{{ docker_service_status.status is not defined or docker_service_status.status.ActiveState != 'active' }}"
        
    - name: Install prerequisites for Docker repository
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
        state: present
      when: docker_needs_install

    - name: Create directory for Docker GPG key
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
      when: docker_needs_install

    - name: Add Docker GPG key
      shell: "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg"
      args:
        creates: /etc/apt/keyrings/docker.gpg
      when: docker_needs_install

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
        state: present
        filename: docker
      when: docker_needs_install

    - name: Install Docker Engine
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes
      when: docker_needs_install
      
    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes
      when: docker_needs_install

    - name: Add sysadmin user to docker group
      user:
        name: sysadmin
        groups: docker
        append: yes
      register: docker_group_result
      
    - name: Log Docker installation status
      debug:
        msg: "Docker installation: {{ 'completed' if docker_needs_install else 'already installed and active' }}"
  tags:
    - services_install
    - docker_setup
    - foundation