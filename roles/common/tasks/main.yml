---
- name: Update apt cache
  apt:
    update_cache: yes
    cache_valid_time: 3600 # Cache is valid for 1 hour
  tags:
    - packages

- name: Install common packages
  apt:
    name:
      - vim
      - git
      - curl
      - wget
      - unzip
    state: present
  tags:
    - packages

- name: Generate SSH key pair for sysadmin user
  ansible.builtin.shell:
    cmd: "ssh-keygen -t ed25519 -f /home/sysadmin/.ssh/sysadmin_automation_key -N ''"
    creates: /home/sysadmin/.ssh/sysadmin_automation_key
  tags:
    - ssh_keys

- name: Set correct ownership for sysadmin SSH keys
  ansible.builtin.file:
    path: /home/sysadmin/.ssh/sysadmin_automation_key
    owner: sysadmin
    group: sysadmin
    mode: "0600"
  tags:
    - ssh_keys

- name: Set correct ownership for sysadmin public SSH key
  ansible.builtin.file:
    path: /home/sysadmin/.ssh/sysadmin_automation_key.pub
    owner: sysadmin
    group: sysadmin
    mode: "0644"
  tags:
    - ssh_keys

- name: Configure SSH client for sysadmin user
  ansible.builtin.blockinfile:
    path: /home/sysadmin/.ssh/config
    create: yes
    owner: sysadmin
    group: sysadmin
    mode: "0600"
    block: |
      Host 10.10.1.* node* console-node*
        User sysadmin
        IdentityFile /home/sysadmin/.ssh/sysadmin_automation_key
        StrictHostKeyChecking no
        UserKnownHostsFile /dev/null
  tags:
    - ssh_keys


- name: Generate SSH key pair for root user
  ansible.builtin.shell:
    cmd: "ssh-keygen -t ed25519 -f /root/.ssh/root_automation_key -N ''"
    creates: /root/.ssh/root_automation_key
  become: yes
  tags:
    - ssh_keys

- name: Read sysadmin public key
  ansible.builtin.slurp:
    src: /home/sysadmin/.ssh/sysadmin_automation_key.pub
  register: sysadmin_pub_key_file
  tags:
    - ssh_keys

- name: Read root public key
  ansible.builtin.slurp:
    src: /root/.ssh/root_automation_key.pub
  become: yes
  register: root_pub_key_file
  tags:
    - ssh_keys

- name: Set public keys as facts
  ansible.builtin.set_fact:
    sysadmin_pub_key: "{{ sysadmin_pub_key_file.content | b64decode }}"
    root_pub_key: "{{ root_pub_key_file.content | b64decode }}"
  tags:
    - ssh_keys

- name: Authorize new sysadmin key for local sysadmin user
  ansible.posix.authorized_key:
    user: sysadmin
    key: "{{ sysadmin_pub_key }}"
    state: present
  tags:
    - ssh_keys

- name: Authorize new root key for local root user
  ansible.posix.authorized_key:
    user: root
    key: "{{ root_pub_key }}"
    state: present
  become: yes
  tags:
    - ssh_keys

- name: Securely configure SSH daemon
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?PermitRootLogin'
    line: 'PermitRootLogin prohibit-password'
    state: present
  notify: restart sshd
  tags:
    - ssh_keys

- name: Update all packages to the latest version
  apt:
    upgrade: dist
    autoremove: yes
    autoclean: yes
  tags:
    - packages

- name: Disable IPv6 comprehensively at boot
  block:
    - name: Add IPv6 disable to GRUB kernel parameters
      lineinfile:
        path: /etc/default/grub
        regexp: '^GRUB_CMDLINE_LINUX_DEFAULT='
        line: 'GRUB_CMDLINE_LINUX_DEFAULT="quiet splash ipv6.disable=1"'
        backup: yes
      notify: update grub
      
    - name: Blacklist IPv6 kernel module
      copy:
        dest: /etc/modprobe.d/disable-ipv6.conf
        content: |
          # Disable IPv6 kernel module
          blacklist ipv6
          alias net-pf-10 off
          alias ipv6 off
        mode: '0644'
      notify: update initramfs

- name: Enable IP forwarding via sysctl
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_set: yes
    state: present
    reload: yes
  tags:
    - network

- name: Install packages for NAT
  apt:
    name:
      - iptables
      - iptables-persistent
    state: present
  tags:
    - network

- name: Configure NAT rules with dynamic interface detection
  block:
    - name: Detect external network interface
      ansible.builtin.shell: "ip route | grep default | head -1 | awk '{print $5}'"
      register: external_interface
      changed_when: false
      
    - name: Validate external interface was detected
      ansible.builtin.fail:
        msg: "Could not detect external network interface"
      when: external_interface.stdout == ""
      
    - name: Log detected external interface
      ansible.builtin.debug:
        msg: "Detected external interface: {{ external_interface.stdout }}"
        
    - name: Check if NAT rule exists
      ansible.builtin.shell: "iptables -t nat -C POSTROUTING -s 10.10.1.0/24 -o {{ external_interface.stdout }} -j MASQUERADE -m comment --comment 'NAT for internal network'"
      register: nat_rule_check
      changed_when: false
      failed_when: false
      
    - name: Set NAT rule for internal network
      ansible.builtin.shell: "iptables -t nat -A POSTROUTING -s 10.10.1.0/24 -o {{ external_interface.stdout }} -j MASQUERADE -m comment --comment 'NAT for internal network'"
      when: nat_rule_check.rc != 0
      register: nat_rule_add
      
    - name: Verify NAT rule was added successfully
      ansible.builtin.shell: "iptables -t nat -C POSTROUTING -s 10.10.1.0/24 -o {{ external_interface.stdout }} -j MASQUERADE -m comment --comment 'NAT for internal network'"
      when: nat_rule_check.rc != 0
      changed_when: false
      failed_when: false
      register: nat_rule_verify
      
    - name: Log NAT rule configuration result
      ansible.builtin.debug:
        msg: "NAT rule configuration: {{ 'already exists' if nat_rule_check.rc == 0 else ('successfully added' if nat_rule_verify.rc == 0 else 'failed to add') }}"
        
    - name: Fail if NAT rule addition was unsuccessful
      ansible.builtin.fail:
        msg: "Failed to add NAT rule after attempt"
      when: 
        - nat_rule_check.rc != 0
        - nat_rule_verify.rc != 0
  tags:
    - network

- name: Persist iptables rules with verification
  block:
    - name: Save iptables rules
      ansible.builtin.command:
        cmd: netfilter-persistent save
      register: iptables_save_result
      changed_when: false
      
    - name: Verify iptables rules were saved
      ansible.builtin.stat:
        path: /etc/iptables/rules.v4
      register: iptables_rules_file
      
    - name: Log iptables persistence result
      ansible.builtin.debug:
        msg: "Iptables rules persistence: {{ 'successful' if iptables_rules_file.stat.exists else 'failed - rules file not found' }}"
        
    - name: Fail if iptables rules were not persisted
      ansible.builtin.fail:
        msg: "Failed to persist iptables rules"
      when: not iptables_rules_file.stat.exists
  tags:
    - network

- name: Include resource limits and monitoring
  include_tasks: monitoring.yml
  tags:
    - monitoring
    - resource_limits
