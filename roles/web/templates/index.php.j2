<?php
// --- Configuration ---
define('SERVER_IP', '{{ server_ip }}');
define('STATE_FILE', __DIR__ . '/state.json');
define('CONFIG_DIR', __DIR__ . '/autoinstall_templates');
define('SESSION_DIR', __DIR__ . '/sessions'); // MUST BE WRITABLE by web server
define('ISO_BASE_URL', '{{ iso_base_url }}');
define('ISO_NAME', 'ubuntu-24.04.2-live-server-amd64.iso');
// --- End Configuration ---


// --- Utility & State Management ---

function is_valid_mac(string $mac): bool {
    return (bool)filter_var($mac, FILTER_VALIDATE_MAC);
}

function read_state_db(): array {
    if (!file_exists(STATE_FILE)) return [];
    $jsonData = file_get_contents(STATE_FILE);
    $data = $jsonData ? json_decode($jsonData, true) : [];
    if (is_array($data)) {
        ksort($data);
        return $data;
    }
    return [];
}

function get_status(string $mac): string {
    $db = read_state_db();
    return $db[strtolower($mac)]['status'] ?? 'NEW';
}

function set_status(string $mac, string $status): bool {
    $mac = strtolower($mac);
    $fp = fopen(STATE_FILE, 'c+');
    if (!$fp) { error_log("Failed to open state file: " . STATE_FILE); return false; }
    if (flock($fp, LOCK_EX)) {
        $raw_data = stream_get_contents($fp);
        $db = json_decode($raw_data, true) ?: [];
        $db[$mac] = ['status' => $status, 'timestamp' => date('c')];
        ftruncate($fp, 0);
        rewind($fp);
        fwrite($fp, json_encode($db, JSON_PRETTY_PRINT));
        fflush($fp);
        flock($fp, LOCK_UN);
        fclose($fp);
        return true;
    }
    fclose($fp);
    error_log("Failed to acquire lock on state file: " . STATE_FILE);
    return false;
}


// --- Action Handlers ---

function prepare_session(string $mac): bool {
    $mac_config_dir = CONFIG_DIR . '/' . $mac;
    $default_config_dir = CONFIG_DIR . '/default';
    $source_dir = is_dir($mac_config_dir) ? $mac_config_dir : $default_config_dir;

    if (!is_dir($source_dir)) {
        error_log("No config source directory found for MAC {$mac}");
        return false;
    }
    
    $session_path = SESSION_DIR . '/' . $mac;
    if (is_dir($session_path)) {
        $files = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator($session_path, RecursiveDirectoryIterator::SKIP_DOTS),
            RecursiveIteratorIterator::CHILD_FIRST
        );
        foreach ($files as $fileinfo) { ($fileinfo->isDir() ? 'rmdir' : 'unlink')($fileinfo->getRealPath()); }
        rmdir($session_path);
    }

    if (!mkdir($session_path, 0755, true)) {
        error_log("Failed to create session directory: {$session_path}");
        return false;
    }

    $user_data_template_path = $source_dir . '/user-data';
    if (file_exists($user_data_template_path)) {
        $template_content = file_get_contents($user_data_template_path);
        $final_content = str_replace('__MAC_ADDRESS__', $mac, $template_content);
        file_put_contents($session_path . '/user-data', $final_content);
    }

    $meta_data_template_path = $source_dir . '/meta-data';
    if (file_exists($meta_data_template_path)) {
        copy($meta_data_template_path, $session_path . '/meta-data');
    }

    $vendor_data_template_path = $source_dir . '/vendor-data';
    $vendor_data_destination_path = $session_path . '/vendor-data';
    if (file_exists($vendor_data_template_path)) {
        copy($vendor_data_template_path, $vendor_data_destination_path);
    } else {
        $empty_content = "#cloud-config\n";
        file_put_contents($vendor_data_destination_path, $empty_content);
    }
    
    return true;
}

function handle_boot(): void {
    $mac = strtolower($_GET['mac'] ?? '');
    if (!is_valid_mac($mac)) {
        header("HTTP/1.1 400 Bad Request");
        echo "Invalid or missing MAC address.";
        return;
    }

    header("Content-Type: text/plain");
    $status = get_status($mac);

    if ($status === 'DONE') {
        echo "#!ipxe\n";
        echo "echo Installation is DONE for {$mac}. Booting from local disk.\n";
        echo "exit\n";
    } else {
        if (!prepare_session($mac)) {
            echo "#!ipxe\n";
            echo "echo ERROR: Could not prepare installation session for {$mac}. Check server logs.\n";
            echo "reboot\n";
            return;
        }

        set_status($mac, 'INSTALLING');
        $seed_url = "http://" . SERVER_IP . "/sessions/" . $mac . "/";
        $kernel_params = "modprobe.blacklist=nvme autoinstall ip=dhcp url=" . ISO_BASE_URL . "/" . ISO_NAME;
        $kernel_params .= " ds=nocloud;seedfrom=" . $seed_url;

        echo "#!ipxe\n";
        echo "echo Starting Ubuntu 24.04 installation for {$mac}...\n";
        echo "kernel " . ISO_BASE_URL . "/casper/vmlinuz {$kernel_params}\n";
        echo "initrd " . ISO_BASE_URL . "/casper/initrd\n";
        echo "boot || goto error\n";
        echo ":error\n";
        echo "echo Critical boot error. Please check server logs. Rebooting in 10s.\n";
        echo "sleep 10\n";
        echo "reboot\n";
    }
}

function handle_callback(): void {
    $mac = strtolower($_GET['mac'] ?? '');
    $status = strtoupper($_GET['status'] ?? '');

    if (!is_valid_mac($mac) || empty($status)) {
        header("HTTP/1.1 400 Bad Request");
        echo "ERROR: MAC and status parameters are required.";
        return;
    }

    if (set_status($mac, $status)) {
        header("Content-Type: text/plain");
        echo "OK: Status for {$mac} updated to {$status}.";
    } else {
        header("HTTP/1.1 500 Internal Server Error");
        echo "ERROR: Failed to update status for {$mac}.";
    }
}

function handle_html_status(): void {
    $db = read_state_db();
    header("Content-Type: text/html; charset=utf-8");
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="refresh" content="15">
    <title>Ansible Provisioning Status</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif; line-height: 1.6; color: #333; background-color: #f4f4f4; margin: 0; padding: 20px; }
        .container { max-width: 900px; margin: auto; background: #fff; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        h1 { color: #2c3e50; text-align: center; }
        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
        th, td { padding: 12px; border: 1px solid #ddd; text-align: left; }
        th { background-color: #3498db; color: white; }
        tr:nth-child(even) { background-color: #ecf0f1; }
        .status { padding: 5px 10px; color: white; border-radius: 5px; font-weight: bold; text-align: center; }
        .status-new { background-color: #95a5a6; }
        .status-installing { background-color: #f39c12; }
        .status-done { background-color: #2ecc71; }
        .status-failed { background-color: #e74c3c; }
        .footer { text-align: center; margin-top: 20px; color: #7f8c8d; font-size: 0.9em; }
    </style>
</head>
<body>
    <div class="container">
        <h1>Ansible Provisioning Status</h1>
        <p>This page shows the real-time status of nodes being provisioned by Ansible. The page automatically refreshes every 15 seconds.</p>
        <table>
            <thead>
                <tr>
                    <th>MAC Address</th>
                    <th>Status</th>
                    <th>Last Update</th>
                </tr>
            </thead>
            <tbody>
                <?php if (empty($db)): ?>
                    <tr><td colspan="3" style="text-align:center;">No nodes have been provisioned yet.</td></tr>
                <?php else: ?>
                    <?php foreach ($db as $mac => $data): ?>
                        <tr>
                            <td><?php echo htmlspecialchars($mac); ?></td>
                            <td>
                                <span class="status status-<?php echo strtolower(htmlspecialchars($data['status'])); ?>">
                                    <?php echo htmlspecialchars($data['status']); ?>
                                </span>
                            </td>
                            <td><?php echo htmlspecialchars($data['timestamp']); ?></td>
                        </tr>
                    <?php endforeach; ?>
                <?php endif; ?>
            </tbody>
        </table>
        <div class="footer">
            This status page reflects the automated provisioning process managed by Ansible.
        </div>
    </div>
</body>
</html>
<?php
}


// --- Main Router ---
$action = $_GET['action'] ?? 'view'; // Default to 'view' for browsers

// If specific iPXE parameters are passed, switch action to boot
if (isset($_GET['mac']) && isset($_GET['action']) && $_GET['action'] == 'boot') {
    $action = 'boot';
}

switch ($action) {
    case 'callback':
        handle_callback();
        break;
    case 'boot':
        handle_boot();
        break;
    case 'view':
    default:
        handle_html_status();
        break;
}