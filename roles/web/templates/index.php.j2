<?php
// /srv/http/index.php

// --- Configuration & Testability ---
function get_state_file_path(): string {
    $test_state_file = $_GET['test_state_file'] ?? null;
    if ($test_state_file) {
        // Strict validation: only allow alphanumeric, dash, underscore, and .json extension
        if (!preg_match('/^[a-zA-Z0-9_-]+\.json$/', $test_state_file)) {
            error_log("Invalid test_state_file parameter: " . $test_state_file);
            return __DIR__ . '/state.json';
        }
        $safe_basename = basename($test_state_file);
        $test_path = "/var/www/html/sessions/" . $safe_basename;
        // Additional security: ensure the resolved path is within allowed directory
        $real_sessions_dir = realpath("/var/www/html/sessions");
        $real_test_path = realpath($test_path);
        if ($real_test_path && strpos($real_test_path, $real_sessions_dir) === 0 && file_exists($test_path)) {
            return $test_path;
        }
    }
    return __DIR__ . '/state.json';
}

define('STATE_FILE', get_state_file_path());
define('SERVER_IP', '{{ server_ip }}');
define('CONFIG_DIR', __DIR__ . '/autoinstall_configs');
define('SESSION_DIR', __DIR__ . '/sessions');
define('ISO_BASE_URL', '{{ iso_base_url }}');
define('ISO_NAME', 'ubuntu-24.04.2-live-server-amd64.iso');
// --- End Configuration ---


// --- Utility & State Management ---

function is_valid_mac(string $mac): bool {
    return (bool)filter_var($mac, FILTER_VALIDATE_MAC);
}

function read_state_db(): array {
    if (!file_exists(STATE_FILE)) return [];
    $jsonData = file_get_contents(STATE_FILE);
    return $jsonData ? json_decode($jsonData, true) : [];
}

function get_status(string $mac): string {
    $db = read_state_db();
    return $db[strtolower($mac)]['status'] ?? 'NEW';
}

function set_status(string $mac, string $status): bool {
    $mac = strtolower($mac);
    $fp = fopen(STATE_FILE, 'c+');
    if (!$fp) { return false; }
    if (flock($fp, LOCK_EX)) {
        $raw_data = stream_get_contents($fp);
        $db = json_decode($raw_data, true) ?: [];
        $db[$mac] = ['status' => $status, 'timestamp' => date('c')];
        ftruncate($fp, 0);
        rewind($fp);
        fwrite($fp, json_encode($db, JSON_PRETTY_PRINT));
        fflush($fp);
        flock($fp, LOCK_UN);
        fclose($fp);
        return true;
    }
    fclose($fp);
    return false;
}

function delete_entry(string $mac): bool {
    $mac = strtolower($mac);
    $fp = fopen(STATE_FILE, 'c+');
    if (!$fp) { return false; }
    if (flock($fp, LOCK_EX)) {
        $raw_data = stream_get_contents($fp);
        $db = json_decode($raw_data, true) ?: [];
        if (isset($db[$mac])) {
            unset($db[$mac]);
        }
        ftruncate($fp, 0);
        rewind($fp);
        fwrite($fp, json_encode($db, JSON_PRETTY_PRINT));
        fflush($fp);
        flock($fp, LOCK_UN);
        fclose($fp);
        return true;
    }
    fclose($fp);
    return false;
}


// --- Action Handlers ---

function handle_boot_request(): void {
    $mac = strtolower($_GET['mac'] ?? '');
    if (!is_valid_mac($mac)) {
        header("HTTP/1.1 400 Bad Request");
        echo "Invalid or missing MAC address.";
        return;
    }
    header("Content-Type: text/plain");
    $status = get_status($mac);
    if ($status === 'DONE') {
        echo "#!ipxe\n";
        echo "echo Installation is DONE for {$mac}. Booting from local disk.\n";
        echo "exit\n";
    } else {
        if (!prepare_session($mac)) {
            echo "#!ipxe\n";
            echo "echo ERROR: Could not prepare installation session. Check server logs.\n";
            echo "reboot\n";
            error_log("Failed to prepare session for MAC: {$mac}");
            return;
        }
        set_status($mac, 'INSTALLING');
        $seed_url = "http://" . SERVER_IP . "/sessions/" . $mac . "/";
        $kernel_params = "modprobe.blacklist=nvme autoinstall ip=dhcp url=" . ISO_BASE_URL . "/" . ISO_NAME;
        $kernel_params .= " ds=nocloud;seedfrom=" . $seed_url;
        echo "#!ipxe\n";
        echo "echo Starting Ubuntu 24.04 installation for {$mac}...\n";
        echo "kernel " . ISO_BASE_URL . "/casper/vmlinuz {$kernel_params}\n";
        echo "initrd " . ISO_BASE_URL . "/casper/initrd\n";
        echo "boot || goto error\n";
        echo ":error\n";
        echo "echo Critical boot error. Please check server logs. Rebooting in 10s.\n";
        echo "sleep 10\n";
        echo "reboot\n";
    }
}

function handle_callback_request(): void {
    $mac = strtolower($_GET['mac'] ?? '');
    $status = strtoupper($_GET['status'] ?? '');
    
    // Validate MAC address
    if (!is_valid_mac($mac)) {
        header("HTTP/1.1 400 Bad Request");
        echo "ERROR: Invalid MAC address format.";
        error_log("Invalid MAC address in callback: " . ($_GET['mac'] ?? 'empty'));
        return;
    }
    
    // Validate status against allowed values
    $allowed_statuses = ['NEW', 'INSTALLING', 'DONE', 'FAILED', 'ERROR'];
    if (empty($status) || !in_array($status, $allowed_statuses, true)) {
        header("HTTP/1.1 400 Bad Request");
        echo "ERROR: Invalid status parameter.";
        error_log("Invalid status in callback: " . ($_GET['status'] ?? 'empty'));
        return;
    }
    
    if (set_status($mac, $status)) {
        header("Content-Type: text/plain");
        echo "OK: Status updated successfully.";
        error_log("Status updated for MAC {$mac} to {$status}");
    } else {
        header("HTTP/1.1 500 Internal Server Error");
        echo "ERROR: Failed to update status.";
        error_log("Failed to update status for MAC {$mac} to {$status}");
    }
}

function handle_reprovision_request(): void {
    $mac = strtolower($_GET['mac'] ?? '');
    if (!is_valid_mac($mac)) {
        header("HTTP/1.1 400 Bad Request");
        echo "Invalid or missing MAC address.";
        return;
    }
    if (set_status($mac, 'NEW')) {
        $redirect_url = '?action=status';
        if (isset($_GET['test_state_file'])) {
            $redirect_url .= '&test_state_file=' . urlencode($_GET['test_state_file']);
        }
        header("Location: " . $redirect_url);
        exit();
    } else {
        header("HTTP/1.1 500 Internal Server Error");
        echo "ERROR: Failed to update status.";
        error_log("Failed to update status for MAC: {$mac}");
    }
}

function handle_delete_request(): void {
    $mac = strtolower($_GET['mac'] ?? '');
    if (!is_valid_mac($mac)) {
        header("HTTP/1.1 400 Bad Request");
        echo "Invalid or missing MAC address.";
        return;
    }
    if (delete_entry($mac)) {
        $redirect_url = '?action=status';
        if (isset($_GET['test_state_file'])) {
            $redirect_url .= '&test_state_file=' . urlencode($_GET['test_state_file']);
        }
        header("Location: " . $redirect_url);
        exit();
    } else {
        header("HTTP/1.1 500 Internal Server Error");
        echo "ERROR: Failed to delete entry.";
        error_log("Failed to delete entry for MAC: {$mac}");
    }
}

function handle_status_request(): void {
    header("Content-Type: text/html");
    $db = read_state_db();
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Provisioning Status</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body { background-color: #f8f9fa; }
        .container { margin-top: 2rem; }
        .table-responsive { margin-top: 1.5rem; }
        .status-badge { font-size: 0.9em; }
        .status-DONE { background-color: #28a745 !important; }
        .status-INSTALLING { background-color: #007bff !important; }
        .status-FAILED { background-color: #dc3545 !important; }
        .status-NEW { background-color: #ffc107 !important; color: #212529 !important; }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Ansible Provisioning Server</a>
        </div>
    </nav>
    <div class="container">
        <div class="d-flex justify-content-between align-items-center">
            <h1 class="h2">System Provisioning Status</h1>
            <button class="btn btn-secondary" onclick="location.reload();">Refresh</button>
        </div>
        <div class="table-responsive">
            <table class="table table-bordered table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>MAC Address</th>
                        <th>Status</th>
                        <th>Last Update</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <?php if (empty($db)): ?>
                        <tr><td colspan="4" class="text-center">No systems have been provisioned yet.</td></tr>
                    <?php else: ?>
                        <?php foreach ($db as $mac => $data): ?>
                            <tr>
                                <td><?php echo htmlspecialchars($mac); ?></td>
                                <td><span class="badge rounded-pill status-<?php echo htmlspecialchars($data['status']); ?>"><?php echo htmlspecialchars($data['status']); ?></span></td>
                                <td><?php echo htmlspecialchars($data['timestamp'] ?? 'N/A'); ?></td>
                                <td>
                                    <?php
                                        $test_param = isset($_GET['test_state_file']) ? '&test_state_file=' . urlencode($_GET['test_state_file']) : '';
                                        $reprovision_url = '?action=reprovision&mac=' . urlencode($mac) . $test_param;
                                        $delete_url = '?action=delete&mac=' . urlencode($mac) . $test_param;
                                    ?>
                                    <?php if ($data['status'] !== 'NEW'): ?>
                                        <a href="<?php echo $reprovision_url; ?>" class="btn btn-primary btn-sm">Reprovision</a>
                                    <?php else: ?>
                                        <button class="btn btn-secondary btn-sm" disabled>Reprovision</button>
                                    <?php endif; ?>
                                    <a href="<?php echo $delete_url; ?>" class="btn btn-danger btn-sm" onclick="return confirm('Are you sure you want to permanently delete this entry?');">Delete</a>
                                </td>
                            </tr>
                        <?php endforeach; ?>
                    <?php endif; ?>
                </tbody>
            </table>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
<?php
}

function prepare_session(string $mac): bool {
    // Additional MAC validation to prevent path traversal
    if (!is_valid_mac($mac)) {
        error_log("Invalid MAC address in prepare_session: {$mac}");
        return false;
    }
    
    // Sanitize MAC for safe filesystem use
    $safe_mac = preg_replace('/[^a-fA-F0-9:]/', '', $mac);
    if ($safe_mac !== $mac) {
        error_log("MAC address sanitization failed: {$mac}");
        return false;
    }
    
    $mac_config_dir = CONFIG_DIR . '/' . $safe_mac;
    $default_config_dir = CONFIG_DIR . '/default';
    $source_dir = is_dir($mac_config_dir) ? $mac_config_dir : $default_config_dir;
    
    if (!is_dir($source_dir)) {
        error_log("Source directory not found: {$source_dir}");
        return false;
    }
    
    $session_path = SESSION_DIR . '/' . $safe_mac;
    
    // Secure cleanup of existing session directory
    if (is_dir($session_path)) {
        try {
            $files = new RecursiveIteratorIterator(
                new RecursiveDirectoryIterator($session_path, RecursiveDirectoryIterator::SKIP_DOTS),
                RecursiveIteratorIterator::CHILD_FIRST
            );
            foreach ($files as $fileinfo) {
                if ($fileinfo->isDir()) {
                    if (!rmdir($fileinfo->getRealPath())) {
                        error_log("Failed to remove directory: " . $fileinfo->getRealPath());
                        return false;
                    }
                } else {
                    if (!unlink($fileinfo->getRealPath())) {
                        error_log("Failed to remove file: " . $fileinfo->getRealPath());
                        return false;
                    }
                }
            }
            if (!rmdir($session_path)) {
                error_log("Failed to remove session directory: {$session_path}");
                return false;
            }
        } catch (Exception $e) {
            error_log("Exception during session cleanup: " . $e->getMessage());
            return false;
        }
    }
    
    // Create session directory with secure permissions
    if (!mkdir($session_path, 0750, true)) {
        error_log("Failed to create session directory: {$session_path}");
        return false;
    }
    
    // Process template files with error handling
    $user_data_template_path = $source_dir . '/user-data';
    if (file_exists($user_data_template_path)) {
        $template_content = file_get_contents($user_data_template_path);
        if ($template_content === false) {
            error_log("Failed to read user-data template: {$user_data_template_path}");
            return false;
        }
        $final_content = str_replace('__MAC_ADDRESS__', $safe_mac, $template_content);
        if (file_put_contents($session_path . '/user-data', $final_content) === false) {
            error_log("Failed to write user-data for session: {$session_path}");
            return false;
        }
    }
    
    $meta_data_template_path = $source_dir . '/meta-data';
    if (file_exists($meta_data_template_path)) {
        if (!copy($meta_data_template_path, $session_path . '/meta-data')) {
            error_log("Failed to copy meta-data for session: {$session_path}");
            return false;
        }
    }
    
    $vendor_data_template_path = $source_dir . '/vendor-data';
    $vendor_data_destination_path = $session_path . '/vendor-data';
    if (file_exists($vendor_data_template_path)) {
        if (!copy($vendor_data_template_path, $vendor_data_destination_path)) {
            error_log("Failed to copy vendor-data for session: {$session_path}");
            return false;
        }
    } else {
        if (file_put_contents($vendor_data_destination_path, "#cloud-config\n# This file was intentionally generated empty.\n") === false) {
            error_log("Failed to create empty vendor-data for session: {$session_path}");
            return false;
        }
    }
    
    return true;
}

// --- Main Execution ---

$action = $_GET['action'] ?? null;
if (!$action && isset($_GET['mac'])) {
    $action = 'boot';
} elseif (!$action) {
    $action = 'status';
}

switch ($action) {
    case 'boot':
        handle_boot_request();
        break;
    case 'callback':
        handle_callback_request();
        break;
    case 'reprovision':
        handle_reprovision_request();
        break;
    case 'delete':
        handle_delete_request();
        break;
    case 'status':
    default:
        handle_status_request();
        break;
}