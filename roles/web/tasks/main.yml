---
- name: Install nginx and php-fpm
  apt:
    name:
      - nginx
      - php-fpm
      - php-json
    state: present
  tags:
    - nginx
    - php

- name: Ensure php-fpm is running with verification
  block:
    - name: Start and enable php-fpm
      service:
        name: php8.3-fpm
        state: started
        enabled: yes
      register: php_fpm_start_result
      
    - name: Wait for php-fpm socket to be available
      ansible.builtin.wait_for:
        path: /var/run/php/php8.3-fpm.sock
        state: present
        timeout: 30
        
    - name: Verify php-fpm service is active
      ansible.builtin.command: systemctl is-active php8.3-fpm
      register: php_fpm_status
      changed_when: false
      failed_when: php_fpm_status.stdout != "active"
      
    - name: Log php-fpm startup success
      ansible.builtin.debug:
        msg: "PHP-FPM successfully started and socket is available"
  tags:
    - php

- name: Configure php-fpm
  template:
    src: www.conf.j2
    dest: /etc/php/8.3/fpm/pool.d/www.conf
  notify: restart php-fpm
  tags:
    - php

- name: Remove default nginx site
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  notify: restart nginx
  tags:
    - nginx

- name: Configure nginx
  template:
    src: nginx.conf.j2
    dest: /etc/nginx/sites-available/default
  notify: restart nginx
  tags:
    - nginx

- name: Enable new nginx site
  file:
    src: /etc/nginx/sites-available/default
    dest: /etc/nginx/sites-enabled/default
    state: link
  notify: restart nginx
  tags:
    - nginx

- name: Remove default nginx page
  file:
    path: /var/www/html/index.nginx-debian.html
    state: absent
  tags:
    - nginx

- name: Copy web root
  template:
    src: index.php.j2
    dest: /var/www/html/index.php
    owner: www-data
    group: www-data
    mode: "0644"
  notify: restart nginx
  tags:
    - www_content

- name: Ensure sessions directory exists and has correct permissions
  file:
    path: /var/www/html/sessions
    state: directory
    owner: www-data
    group: www-data
    mode: "0775"
  tags:
    - www_content

- name: Ensure state file exists and has correct permissions
  file:
    path: /var/www/html/state.json
    state: touch
    owner: www-data
    group: www-data
    mode: "0664"
  tags:
    - www_content

- name: Create autoinstall templates base directory
  file:
    path: "{{ nginx_web_root }}/autoinstall_configs"
    state: directory
    owner: www-data
    group: www-data
    mode: "0755"
  tags:
    - autoinstall_configs

- name: Create node-specific autoinstall directories
  file:
    path: "{{ nginx_web_root }}/autoinstall_configs/{{ item.mac }}"
    state: directory
    owner: www-data
    group: www-data
    mode: "0755"
  loop: "{{ provisioning_nodes }}"
  tags:
    - autoinstall_configs

- name: Create default autoinstall directory
  file:
    path: "{{ nginx_web_root }}/autoinstall_configs/default"
    state: directory
    owner: www-data
    group: www-data
    mode: "0755"
  tags:
    - autoinstall_configs

- name: Template out user-data for each node
  template:
    src: autoinstall-user-data.j2
    dest: "{{ nginx_web_root }}/autoinstall_configs/{{ item.mac }}/user-data"
    owner: www-data
    group: www-data
    mode: "0644"
  loop: "{{ provisioning_nodes }}"
  vars:
    hostname: "{{ item.hostname }}"
    mac: "{{ item.mac }}"
  tags:
    - autoinstall_configs

- name: Template out meta-data for each node
  template:
    src: autoinstall-meta-data.j2
    dest: "{{ nginx_web_root }}/autoinstall_configs/{{ item.mac }}/meta-data"
    owner: www-data
    group: www-data
    mode: "0644"
  loop: "{{ provisioning_nodes }}"
  vars:
    hostname: "{{ item.hostname }}"
  tags:
    - autoinstall_configs

- name: Template out user-data for default
  template:
    src: autoinstall-user-data.j2
    dest: "{{ nginx_web_root }}/autoinstall_configs/default/user-data"
    owner: www-data
    group: www-data
    mode: "0644"
  vars:
    hostname: "{{ default_autoinstall_node.hostname }}"
    mac: "{{ default_autoinstall_node.mac }}"
  tags:
    - autoinstall_configs

- name: Template out meta-data for default
  template:
    src: autoinstall-meta-data.j2
    dest: "{{ nginx_web_root }}/autoinstall_configs/default/meta-data"
    owner: www-data
    group: www-data
    mode: "0644"
  vars:
    hostname: "{{ default_autoinstall_node.hostname }}"
  tags:
    - autoinstall_configs

- name: Generate redfish script
  template:
    src: ../../templates/redfish.py.j2
    dest: /home/sysadmin/redfish.py
    owner: sysadmin
    group: sysadmin
    mode: "0755"
  tags:
    - redfish_script

- name: Generate verification script with error handling
  block:
    - name: Generate verification script
      template:
        src: ../../templates/verify_provisioning.py.j2
        dest: /home/sysadmin/verify_provisioning.py
        owner: sysadmin
        group: sysadmin
        mode: "0755"
      register: verification_script_result
      
    - name: Verify script was created and is executable
      ansible.builtin.stat:
        path: /home/sysadmin/verify_provisioning.py
      register: verification_script_check
      
    - name: Fail if verification script creation failed
      ansible.builtin.fail:
        msg: "Failed to create verification script"
      when: not verification_script_check.stat.exists or not verification_script_check.stat.executable
      
    - name: Log verification script creation success
      ansible.builtin.debug:
        msg: "Verification script successfully created and is executable"
  tags:
    - verify_script
