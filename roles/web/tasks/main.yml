---
- name: Install nginx and php-fpm
  apt:
    name:
      - nginx
      - php-fpm
      - php-json
    state: present
  tags:
    - services_install
    - foundation
    - packages

- name: Ensure php-fpm is running with verification
  block:
    - name: Check php-fpm current status
      systemd:
        name: php8.3-fpm
      register: php_fpm_current_status
      ignore_errors: true
      
    - name: Start and enable php-fpm
      service:
        name: php8.3-fpm
        state: started
        enabled: yes
      register: php_fpm_start_result
      when: php_fpm_current_status.status is not defined or php_fpm_current_status.status.ActiveState != 'active'
      
    - name: Wait for php-fpm socket to be available
      ansible.builtin.wait_for:
        path: /var/run/php/php8.3-fpm.sock
        state: present
        timeout: 30
        
    - name: Verify php-fpm service is active
      ansible.builtin.command: systemctl is-active php8.3-fpm
      register: php_fpm_status
      changed_when: false
      failed_when: php_fpm_status.stdout != "active"
      
    - name: Log php-fpm startup success
      ansible.builtin.debug:
        msg: "PHP-FPM successfully started and socket is available"
  tags:
    - services_install
    - validation

- name: Configure php-fpm
  template:
    src: www.conf.j2
    dest: /etc/php/8.3/fpm/pool.d/www.conf
  register: php_fpm_config_changed
  tags:
    - web_config
    - maintenance

- name: Restart php-fpm when configuration changes
  service:
    name: php8.3-fpm
    state: restarted
  when: php_fpm_config_changed.changed
  tags:
    - web_config
    - maintenance

- name: Remove default nginx site
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  register: nginx_default_removed
  tags:
    - web_config
    - services_install

- name: Restart nginx when default site removed
  service:
    name: nginx
    state: restarted
  when: nginx_default_removed.changed
  tags:
    - web_config
    - services_install

- name: Configure nginx with verification
  block:
    - name: Deploy nginx configuration
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/sites-available/default
      register: nginx_config_result
      
    - name: Test nginx configuration syntax
      command: nginx -t
      changed_when: false
      register: nginx_syntax_test
      
    - name: Fail if nginx configuration is invalid
      fail:
        msg: "Nginx configuration syntax error: {{ nginx_syntax_test.stderr }}"
      when: nginx_syntax_test.rc != 0
      
    - name: Enable new nginx site
      file:
        src: /etc/nginx/sites-available/default
        dest: /etc/nginx/sites-enabled/default
        state: link
      
    - name: Stop nginx for clean restart
      service:
        name: nginx
        state: stopped
      
    - name: Start nginx and ensure it's enabled
      service:
        name: nginx
        state: started
        enabled: yes
      register: nginx_start_result
      
    - name: Wait a moment for nginx to fully initialize
      pause:
        seconds: 2
      
    - name: Wait for nginx to be ready
      wait_for:
        port: 80
        host: "{{ server_ip }}"
        state: started
        timeout: 30
        
    - name: Log nginx configuration deployment success
      debug:
        msg: "Nginx configuration deployed and service restarted successfully"
  tags:
    - web_config
    - services_install

- name: Remove default nginx page
  file:
    path: /var/www/html/index.nginx-debian.html
    state: absent
  tags:
    - web_config
    - services_install

- name: Ensure web directory has proper permissions
  file:
    path: /var/www/html
    owner: www-data
    group: www-data
    mode: "0755"
    state: directory
  tags:
    - web_config
    - permissions
    - foundation

- name: Copy nodes.json to the web root
  copy:
    src: "{{ playbook_dir }}/nodes.json"
    dest: "/var/www/html/nodes.json"
    owner: www-data
    group: www-data
    mode: '0644'
  tags:
    - web_config
    - templates
    - web_files_only

- name: Create lib directory for PHP libraries
  file:
    path: /var/www/html/lib
    state: directory
    owner: www-data
    group: www-data
    mode: "0755"
  tags:
    - web_config
    - foundation
    - permissions

- name: Copy shared PHP node library
  template:
    src: lib/nodes.php.j2
    dest: /var/www/html/lib/nodes.php
    owner: www-data
    group: www-data
    mode: "0644"
  tags:
    - web_config
    - templates
    - web_files_only

- name: Copy web root with verification
  block:
    - name: Template index.php file
      template:
        src: index.php.j2
        dest: /var/www/html/index.php
        owner: www-data
        group: www-data
        mode: "0644"
      register: index_php_result
      
    - name: Verify index.php was created successfully
      stat:
        path: /var/www/html/index.php
      register: index_php_check
      failed_when: not index_php_check.stat.exists or not index_php_check.stat.readable
      
    - name: Check if nginx can read the index.php file
      command: sudo -u www-data test -r /var/www/html/index.php
      changed_when: false
      register: nginx_read_test
      
    - name: Log file permissions and ownership
      debug:
        msg: |
          index.php details:
          - Size: {{ index_php_check.stat.size }} bytes
          - Owner: {{ index_php_check.stat.pw_name }}:{{ index_php_check.stat.gr_name }}
          - Mode: {{ index_php_check.stat.mode }}
          - Readable by nginx: {{ 'Yes' if nginx_read_test.rc == 0 else 'No' }}
  tags:
    - web_config
    - templates
    - permissions
    - web_files_only

- name: Ensure sessions directory exists and has correct permissions
  file:
    path: /var/www/html/sessions
    state: directory
    owner: www-data
    group: www-data
    mode: "0775"
  tags:
    - web_config
    - permissions
    - foundation

- name: Ensure state file exists and has correct permissions
  file:
    path: /var/www/html/state.json
    state: touch
    owner: www-data
    group: www-data
    mode: "0664"
  tags:
    - web_config
    - permissions
    - foundation

- name: Create autoinstall templates base directory
  file:
    path: "{{ nginx_web_root }}/autoinstall_configs"
    state: directory
    owner: www-data
    group: www-data
    mode: "0755"
  tags:
    - autoinstall_config
    - foundation
    - permissions

- name: Create node-specific autoinstall directories
  file:
    path: "{{ nginx_web_root }}/autoinstall_configs/{{ item.mac }}"
    state: directory
    owner: www-data
    group: www-data
    mode: "0755"
  loop: "{{ provisioning_nodes }}"
  tags:
    - autoinstall_configs

- name: Create default autoinstall directory
  file:
    path: "{{ nginx_web_root }}/autoinstall_configs/default"
    state: directory
    owner: www-data
    group: www-data
    mode: "0755"
  tags:
    - autoinstall_configs

- name: Template out user-data for each node
  template:
    src: autoinstall-user-data.j2
    dest: "{{ nginx_web_root }}/autoinstall_configs/{{ item.mac }}/user-data"
    owner: www-data
    group: www-data
    mode: "0644"
  loop: "{{ provisioning_nodes }}"
  vars:
    hostname: "{{ item.hostname }}"
    mac: "{{ item.mac }}"
  tags:
    - autoinstall_config
    - templates
    - maintenance
    - web_files_only

- name: Template out meta-data for each node
  template:
    src: autoinstall-meta-data.j2
    dest: "{{ nginx_web_root }}/autoinstall_configs/{{ item.mac }}/meta-data"
    owner: www-data
    group: www-data
    mode: "0644"
  loop: "{{ provisioning_nodes }}"
  vars:
    hostname: "{{ item.hostname }}"
  tags:
    - autoinstall_config
    - templates
    - maintenance
    - web_files_only

- name: Template out user-data for default
  template:
    src: autoinstall-user-data.j2
    dest: "{{ nginx_web_root }}/autoinstall_configs/default/user-data"
    owner: www-data
    group: www-data
    mode: "0644"
  vars:
    hostname: "{{ default_autoinstall_node.hostname }}"
    mac: "{{ default_autoinstall_node.mac }}"
  tags:
    - autoinstall_config
    - templates
    - foundation

- name: Template out meta-data for default
  template:
    src: autoinstall-meta-data.j2
    dest: "{{ nginx_web_root }}/autoinstall_configs/default/meta-data"
    owner: www-data
    group: www-data
    mode: "0644"
  vars:
    hostname: "{{ default_autoinstall_node.hostname }}"
  tags:
    - autoinstall_configs
    - web_files_only

# Multi-OS configuration support
- name: Create multi-OS default configuration directories
  file:
    path: "{{ nginx_web_root }}/autoinstall_configs/{{ os_key }}_default"
    state: directory
    owner: www-data
    group: www-data
    mode: "0755"
  loop: "{{ supported_operating_systems | dict2items }}"
  loop_control:
    loop_var: os_item
  vars:
    os_key: "{{ os_item.key }}"
  tags:
    - autoinstall_config
    - foundation
    - permissions
    - web_files_only

- name: Template out Ubuntu default configurations (for backward compatibility)
  template:
    src: "{{ item.template }}"
    dest: "{{ nginx_web_root }}/autoinstall_configs/ubuntu2404_default/{{ item.filename }}"
    owner: www-data
    group: www-data
    mode: "0644"
  loop:
    - { template: "autoinstall-user-data.j2", filename: "user-data" }
    - { template: "autoinstall-meta-data.j2", filename: "meta-data" }
  vars:
    hostname: "{{ default_autoinstall_nodes.ubuntu2404.hostname }}"
    mac: "{{ default_autoinstall_nodes.ubuntu2404.mac }}"
  tags:
    - autoinstall_config
    - templates
    - foundation
    - web_files_only

- name: Template out Proxmox default configurations
  template:
    src: "{{ item.template }}"
    dest: "{{ nginx_web_root }}/autoinstall_configs/proxmox9_default/{{ item.filename }}"
    owner: www-data
    group: www-data
    mode: "0644"
  loop:
    - { template: "proxmox-preseed.cfg.j2", filename: "answer.toml" }
    - { template: "proxmox-meta-data.j2", filename: "meta-data" }
  vars:
    hostname: "{{ default_autoinstall_nodes.proxmox9.hostname | default('node-default') }}"
    mac: "{{ default_autoinstall_nodes.proxmox9.mac }}"
    os_ip: "{{ default_autoinstall_nodes.proxmox9.os_ip | default('10.10.1.100') }}"
  tags:
    - autoinstall_config
    - templates
    - foundation
    - web_files_only

- name: Create API directory
  file:
    path: "{{ nginx_web_root }}/api"
    state: directory
    owner: www-data
    group: www-data
    mode: "0755"
  tags:
    - web_config
    - foundation
    - permissions
    - web_files_only

- name: Generate Proxmox answer API endpoint
  template:
    src: answer.php.j2
    dest: "{{ nginx_web_root }}/api/answer.php"
    owner: www-data
    group: www-data
    mode: "0644"
  tags:
    - templates
    - web_config
    - web_files_only

- name: Deploy node registration API endpoint
  template:
    src: register-node.php.j2
    dest: "{{ nginx_web_root }}/api/register-node.php"
    owner: www-data
    group: www-data
    mode: "0644"
  tags:
    - web_config
    - templates
    - web_files_only

- name: Deploy node status API endpoint
  template:
    src: node-status.php.j2
    dest: "{{ nginx_web_root }}/api/node-status.php"
    owner: www-data
    group: www-data
    mode: "0644"
  tags:
    - web_config
    - templates
    - web_files_only

- name: Deploy SSH key collection API endpoint
  template:
    src: collect-ssh-key.php.j2
    dest: "{{ nginx_web_root }}/api/collect-ssh-key.php"
    owner: www-data
    group: www-data
    mode: "0644"
  tags:
    - web_config
    - templates
    - web_files_only

- name: Deploy SSH key retrieval API endpoint
  template:
    src: get-ssh-keys.php.j2
    dest: "{{ nginx_web_root }}/api/get-ssh-keys.php"
    owner: www-data
    group: www-data
    mode: "0644"
  tags:
    - web_config
    - templates
    - web_files_only

- name: Create SSH keys directory for web access
  file:
    path: "{{ nginx_web_root }}/keys"
    state: directory
    owner: www-data
    group: www-data
    mode: "0755"
  tags:
    - web_config
    - web_files_only

- name: Copy SSH public key for API access
  copy:
    src: "/home/sysadmin/.ssh/sysadmin_automation_key.pub"
    dest: "{{ nginx_web_root }}/keys/sysadmin_automation_key.pub"
    owner: www-data
    group: www-data
    mode: "0644"
    remote_src: yes
  tags:
    - web_config
    - web_files_only

- name: Copy SSH private key for API access
  copy:
    src: "/home/sysadmin/.ssh/sysadmin_automation_key"
    dest: "{{ nginx_web_root }}/keys/sysadmin_automation_key"
    owner: www-data
    group: www-data
    mode: "0640"
    remote_src: yes
  tags:
    - web_config
    - web_files_only

- name: Create data directory for node registrations
  file:
    path: "{{ nginx_web_root }}/data"
    state: directory
    owner: www-data
    group: www-data
    mode: "0755"
  tags:
    - web_config
    - web_files_only

- name: Create logs directory for API logs
  file:
    path: "{{ nginx_web_root }}/logs"
    state: directory
    owner: www-data
    group: www-data
    mode: "0755"
  tags:
    - web_config
    - web_files_only
    - foundation

- name: Generate redfish script for sysadmin user
  template:
    src: ../../templates/redfish.py.j2
    dest: /home/sysadmin/redfish.py
    owner: sysadmin
    group: sysadmin
    mode: "0755"
  tags:
    - templates
    - foundation
    - permissions

- name: Deploy redfish script for web interface
  template:
    src: redfish.py.j2
    dest: /var/www/html/redfish.py
    owner: www-data
    group: www-data
    mode: "0755"
  tags:
    - web_config
    - templates
    - permissions
    - web_files_only

- name: Create scripts directory for post-install automation
  file:
    path: "{{ nginx_web_root }}/scripts"
    state: directory
    owner: www-data
    group: www-data
    mode: "0755"
  tags:
    - web_config
    - web_files_only

- name: Deploy Proxmox post-install script
  copy:
    src: /home/sysadmin/claude/ansible-provisioning-server/scripts/proxmox-post-install.sh
    dest: "{{ nginx_web_root }}/scripts/proxmox-post-install.sh"
    owner: www-data
    group: www-data
    mode: "0755"
  tags:
    - web_config
    - templates
    - web_files_only

- name: Deploy Proxmox ansible pull script
  template:
    src: proxmox-ansible-pull.sh.j2
    dest: "{{ nginx_web_root }}/scripts/proxmox-ansible-pull.sh"
    owner: www-data
    group: www-data
    mode: "0755"
  tags:
    - web_config
    - templates
    - web_files_only

- name: Create playbooks directory for web access
  file:
    path: "{{ nginx_web_root }}/playbooks"
    state: directory
    owner: www-data
    group: www-data
    mode: "0755"
  tags:
    - web_config
    - web_files_only

- name: Deploy Proxmox post-install playbook
  copy:
    src: /home/sysadmin/claude/ansible-provisioning-server/playbooks/proxmox-post-install.yml
    dest: "{{ nginx_web_root }}/playbooks/proxmox-post-install.yml"
    owner: www-data
    group: www-data
    mode: "0644"
  tags:
    - web_config
    - templates
    - web_files_only

- name: Generate verification script with error handling
  block:
    - name: Generate verification script
      template:
        src: ../../templates/verify_provisioning.py.j2
        dest: /home/sysadmin/verify_provisioning.py
        owner: sysadmin
        group: sysadmin
        mode: "0755"
      register: verification_script_result
      
    - name: Verify script was created and is executable
      ansible.builtin.stat:
        path: /home/sysadmin/verify_provisioning.py
      register: verification_script_check
      
    - name: Fail if verification script creation failed
      ansible.builtin.fail:
        msg: "Failed to create verification script"
      when: not verification_script_check.stat.exists or not verification_script_check.stat.executable
      
    - name: Log verification script creation success
      ansible.builtin.debug:
        msg: "Verification script successfully created and is executable"
  tags:
    - verify_script

- name: Final web service validation
  block:
    - name: Test HTTP response after configuration
      uri:
        url: "http://{{ server_ip }}/"
        method: GET
        status_code: 200
        timeout: 10
      register: final_web_test
      ignore_errors: true
      
    - name: Log web service test result
      debug:
        msg: |
          Web service test:
          - Status: {{ 'SUCCESS' if (final_web_test.status | default(0)) == 200 else 'FAILED' }}
          - HTTP Status: {{ final_web_test.status | default('N/A') }}
          - Content Type: {{ final_web_test.content_type | default('N/A') }}
          
    - name: Display troubleshooting info if web test failed
      debug:
        msg: |
          Web service test failed. Check:
          1. nginx status: systemctl status nginx
          2. PHP-FPM status: systemctl status php8.3-fpm
          3. nginx error logs: tail -f /var/log/nginx/error.log
          4. PHP-FPM logs: tail -f /var/log/php8.3-fpm.log
          5. File permissions: ls -la /var/www/html/index.php
      when: (final_web_test.status | default(0)) != 200
  tags:
    - validation
